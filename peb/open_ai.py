"""
This module provides an interface to interact with OpenAI's GPT-3.5 model for generating
and moderating text.
It is designed to work as part of a larger application that requires content generation
and moderation capabilities.

The OpenAI class within this module encapsulates functionality for creating responses
using the GPT-3.5 model and for moderating prompts to ensure they adhere to defined guidelines.
The class methods leverage the OpenAI API to achieve these tasks.

Features:
- Initialize the OpenAI model with predefined parameters.
- Generate responses from the model based on a given instruction and user prompt.
- Optionally enhance the prompt before sending it to the model.
- Moderate prompts to check for content that might violate specific guidelines like
    containing personal information,
  engaging in harmful activities, or generating misinformation.

Environment Variables:
- OPENAI_ORGANIZATION: Specifies the OpenAI organization ID.
- OPENAI_API_KEY: Provides the API key for authenticating with the OpenAI service.

Usage:
The module is intended to be used in an environment where an OpenAI API key is available.
It should be imported and instantiated within an application that requires automated
    content generation and moderation.

Example:
    connection = OpenAI()
    response = connection.create(instruction="Refine this prompt", prompt="Example prompt")
    is_flagged = connection.moderate("Example prompt to moderate")

Logging:
The module configures basic logging to track its operations and interactions with the OpenAI API.

Dependencies:
- openai
- python-dotenv

Note:
Ensure that the required environment variables are set before using this module,
as they are crucial for authenticating with the OpenAI API.
"""
import logging
import os

import openai
from dotenv import load_dotenv
from openai.types.chat import ChatCompletion

load_dotenv()
openai.organization = os.getenv("OPENAI_ORGANIZATION")
openai.api_key = os.getenv("OPENAI_API_KEY")
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)


class OpenAI:
    """
    A class to interact with OpenAI's GPT-3.5 model for text generation and moderation.

    This class provides methods to create responses from OpenAI's GPT-3.5 model
    based on user inputs and to moderate these inputs to ensure they conform
    to specific guidelines.
    It is designed to be used in applications requiring AI-driven text generation
        and content moderation.

    Attributes:
    model (str): Identifier for the OpenAI model being used, defaulting to 'gpt-3.5-turbo'.
    temperature (float): Controls the randomness of the model's responses,
        with a default value of 0.5.
    validation_prompt (str): A preset prompt used for validating user inputs against
        specific criteria.
    prompt_enhancement_instruction (str): Instructions for refining user-provided prompts to
        optimize clarity and effectiveness.

    Methods:
    create(instruction, prompt, enhancement=None): Generates a response from the model based on
    provided instruction and prompt. Optionally enhances the prompt.
    moderate(prompt): Moderates a given prompt to ensure it does not contain inappropriate or
        harmful content.

    Usage Example:
        openai_obj = OpenAI()
        response = openai_obj.create("Please refine this prompt", "Example user prompt")
        is_flagged = openai_obj.moderate("Example user prompt for moderation")

    Note:
    - The temperature attribute can be adjusted to control the creativity of the
        model's responses.
    - The validation and enhancement instructions are crucial for maintaining the quality
        and appropriateness
      of the content generated by the model.
    """

    def __init__(self) -> None:
        self.model = "gpt-3.5-turbo"
        self.temperature = 0.5
        self.validation_prompt = (
            "I am going to give you a prompt enclosed within angle brackets <> for your "
            "analysis. Do not answer it. Your task is just to make sure that it does not contain"
            " personal or confidential information, that it does not seek to engage in harmful "
            " or illegal"
            " activities, that it does not seek to generate misinformation or disinformation, "
            " that it does not"
            " include discrimination, harassment or hate speech, that it does not request "
            " assistance in"
            " deceiving or manipulating anyone, and that it does not ask for specific medical or "
            " legal"
            ' diagnoses. If the prompt does not violate any rules, just say "Ok". If the prompt '
            " breaks any"
            ' rules, just say "No". Do not say anything else'
        )

        self.prompt_enhancement_instruction = """Your objective is to refine a draft prompt
         provided by the user. Don't answer the draft prompt directly.
        Your task is to optimize the draft prompt for clarity, completeness, and effectiveness, ensuring that it is
        perfectly understandable by ChatGPT. If the draft prompt lacks essential information, your role is to fill in
        the gaps appropriately. The final output should be a single paragraph, not exceeding 500 words, and formatted 
        in plain text. The audience for the enhanced prompt is ChatGPT itself, so the language should be tailored to
        what the model can understand best. Please adhere strictly to these guidelines to ensure the highest quality
        output. Never answer the draft prompt directly. Your task is to generate an improved prompt that ChatGPT 
        can use to answer the question. Do this step by step. Take a deep breath. 
        The draft prompt will be enclosed within angle brackets <>."""

    def create(self, instruction, prompt, enhancement=None) -> ChatCompletion:
        """
        Create a response from the OpenAI model based on the provided instruction and prompt.
        Optionally, an enhancement can be added to the prompt.

        Parameters:
        instruction (str): Instruction for the AI model.
        prompt (str): The user's prompt to be processed.
        enhancement (Optional[str]): Additional content to enhance the prompt.

        Returns:
        ChatCompletion: The response from the OpenAI API.
        """
        logger.info("Instruction: %s", instruction)
        response = openai.chat.completions.create(
            model=self.model,
            temperature=self.temperature,
            messages=[
                {"role": "system", "content": instruction},
                {"role": "user", "content": "<" + prompt + ">"},
                {"role": "system", "content": enhancement},
            ],
        )
        return response

    @staticmethod
    def moderate(prompt) -> bool:
        """
        Moderate the given prompt to check for any content that violates guidelines.

        Parameters:
        prompt (str): The prompt to be moderated.

        Returns:
        bool: True if the prompt is flagged, False otherwise.
        """
        logger.info("Moderating: %s", prompt)
        response = openai.moderations.create(input=prompt)
        logger.info("Moderation response: %s", type(response.results[0]))
        return response.results[0].flagged


if __name__ == "__main__":
    connection = OpenAI()
